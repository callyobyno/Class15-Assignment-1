Maven and Gradle

Both are build tools.

Apache first released “Apache Ant” in 2000, which is the predecessor for Maven. Maven was formally introduced in 2002, and a v1 release occurred in 2000, and a v2 release in 2005. The most modern day version (v3) of Maven was released in 2010. 
Gradle’s was first developed in 2008, and it’s v1 release was 2012. Between 2012, and 2021, a number of version releases have occurred, with the most recent 2021 being version 7. Gradle is also know for being incorporated into Android builds, as of 2013. 
Maven has it’s default directory structure in Java projects. It runs within the Java Virtual Machine (JVM) and it’s core functionality builds Java applications only. Likewise, Gradle runs inside the JVM.

Differences include:

1. Projects can be built on the Maven command line interface in a standard way, using the Maven lifecycle. WHEREAS, Gradle’s build model if quite modifiable directly from the build script. So an additional plugin is not needed to build logic on the fly.

2. Maven creates build artifacts within a target directory, whereas Gradle uses a build directory.

3. Maven projects are defined with an XML build file (which contains the project group, artifact ID, and version; as well as the project dependencies). WHEREAS, Gradle used code-based scripts (Groovy language, or Kotlin) which makes configurations less verbose. XML is just more wordy.

4. When running Maven commands, for instance Maven test, the Maven lifecycle up and including test (command), will be run. WHEREAS, Gradle makes building applications faster and easier; when making minor changes, a full rebuild (or going thru the entire lifecycle) is not necessary.

5. For a simple Java applications build, Pom. Xml is lengthier and thus larger in size than build.gradle is. Gradle is easier to read and more maintainable than POM.xml is. 

6. Gradle is thought to be better for larger projects, and Maven for small, simpler projects. 

